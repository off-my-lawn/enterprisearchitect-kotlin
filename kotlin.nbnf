/*
Copyright 2020 Eve McNeilly

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
This file contains a translation of the official Kotlin language grammar into the syntax required to implement
reverse engineering into Sparx Systems Enterprise Architect.

See:
https://kotlinlang.org/docs/reference/grammar.html
https://sparxsystems.com/
*/



caseSensitive();

delimiters(<DELIMITER>);
lex(<TOKENS>);

parse(<kotlinFile>, <languageEscape>);

// Lexer rules (derived from Java sample provided in Enterprise Architect install)
<DELIMITER>			::= "\n" | "\r" | "\t" |  " " |
						"~"  | "`"  | "!"  |  "@" |
						"#"  | "%"  |  "^" |
						"&"  | "*"  | "("  | ")"  |
						"-"  | "+"  | "="  | "{"  |
						"["  | "}"  | "]"  | ";"  |
						":"  | "\\" | "\'" | "\"" |
						","  | "<"  | ">"  | "/"  |
						"?"  | "|"  | ".";

<TOKENS>			::= <WHITESPACE>+ |
						<NL> |
						<SHEBANG_LINE> |
						<COMMENT> |
						<NUMBER> |
						<STRING> |
						token(
							keywords() |
							<IDENTIFIER_TOKEN>
						);

<WHITESPACE>		::= " " | "\t";
<NL>				::= token("\r" "\n" | "\n");

<SHEBANG_LINE>		::= token( "#!" skip(<NL>) <NL>);

<COMMENT>			::= token(
							"//" skip(<NL>) |
							"//" [skipEof()] |
							"/*" skip("*/") "*/"
						);

<NUMBER>			::= token(
						<BOOLEAN_LITERAL> |
						<HEX_FLOAT_NUMBER> |
						<DEC_FLOAT_NUMBER> |
						<HEX_NUMBER> ["l" | "L"] |
						<DEC_NUMBER> ["l" | "L"]
					);

// **FIX: Numbers can have underscores between digits
// ALL NUMBER TYPES!
// <DEC_NUMBER>							::= "0".."9" ("_"* "0".."9")*;

<DEC_FLOAT_NUMBER>	::= "0".."9"+ "." ["0".."9"+] [("e" | "E") ["+" | "-"] "0".."9"+] ["f" | "F" | "d" | "D"] |
						"." "0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+] ["f" | "F" | "d" | "D"] |
						"0".."9"+ ("e" | "E") ["+" | "-"] "0".."9"+ ["f" | "F" | "d" | "D"] |
						"0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+] ("f" | "F" | "d" | "D");

<HEX_FLOAT_NUMBER>	::= "0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+ "." ("0".."9" | "a".."f" | "A".."F")* [("p" | "P") ["+" | "-"] ("0".."9" | "a".."f" | "A".."F")+] ["f" | "F" | "d" | "D"] |
						"0" ("x" | "X") "." ("0".."9" | "a".."f" | "A".."F")+ [("p" | "P") ["+" | "-"] ("0".."9" | "a".."f" | "A".."F")+] ["f" | "F" | "d" | "D"] |
						"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+ ("p" | "P") ["+" | "-"] ("0".."9" | "a".."f" | "A".."F")+ ["f" | "F" | "d" | "D"] |
						"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+ [("p" | "P") ["+" | "-"] ("0".."9" | "a".."f" | "A".."F")+] ("f" | "F" | "d" | "D");

<DEC_NUMBER>		::= "0".."9"+;

<HEX_NUMBER>		::= "0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;

<BOOLEAN_LITERAL>	::= "true" | "false";

<STRING>			::= token("\"") token(<STRING_BODY>) token("\"") |
						token("\'") token(<CHAR_BODY>) token("\'");

<STRING_BODY>		::= skip("\"", "\\\"" | "\\\\");

<CHAR_BODY>			::= skip("\'", "\\\'" | "\\\\");

<IDENTIFIER_TOKEN>	::= ("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "_" | "$" | "0".."9")*;

<languageEscape>	::= attribute("COMMENT", <COMMENT>);

////////////////////////////////////////////////////////
// Syntax Grammar : General
////////////////////////////////////////////////////////

// For Enterprise Architect to see the remainder of this file as belonging to
// the defined package we need to have the contents inside the package node.
<kotlinFile>		::= [<shebangLine>] <NL>* <fileAnnotation>* <package>;
<package>			::= node("PACKAGE", <packageHeader> <importList> <topLevelObject>*) <NL>*;

// Alternate top level entry.
<script>			::= [<shebangLine>] <NL>* <fileAnnotation>* <scriptPackage>;
<scriptPackage>			::= node("PACKAGE", <packageHeader> <importList> (<statement> <semi>)*) <NL>*;

<shebangLine>		::= <SHEBANG_LINE>;

// Left out AT_PRE_WS. Not sure if it has any application in this usage.
<fileAnnotation>	::= "@" "file" <NL>* ":" <NL>* ("[" <unescapedAnnotation>+ "]" | <unescapedAnnotation>) <NL>*;

////////////////////////////////////////////////////////
// Syntax Grammar : Packages
////////////////////////////////////////////////////////

<packageHeader>		::= ["package" attribute("NAME", <identifier>) [<semi>]];


////////////////////////////////////////////////////////
// Syntax Grammar : Imports
////////////////////////////////////////////////////////
<importList>		::= <importHeader>*;

<importHeader>		::= <eaPackageImport> | <eaElementImport>;

<eaElementImport>	::= node("ELEMENTIMPORT", "import" <identifierAsName> [<importAlias>]) [<semi>];
<eaPackageImport>	::= node("PACKAGEIMPORT", "import" <identifierAsName> "." "*") [<semi>];

<importAlias>		::= "as" attribute("ALIAS", <simpleIdentifier>);

<topLevelObject>	::= <declaration> [<semis>];

<typeAlias>			::= [<modifiers>] "typealias" <simpleIdentifier> [<typeParameters>] "=" <type>;

<declaration>		::= <classDeclaration> |
						<objectDeclaration> |
						<functionDeclaration> |
						<propertyDeclaration> |
						<typeAlias>;


////////////////////////////////////////////////////////
// Syntax Grammar : Classes
////////////////////////////////////////////////////////

// Will require node("CLASS",...) and node("INTERFACE",...) to import
<classDeclaration>	::= <eaClass> | <eaInterface>;

<eaClass>			::= node("CLASS", node("DECLARATION", <eaClassHeader>) [<NL>* <classBody> | <NL>* <enumClassBody>]);
<eaInterface>		::= node("INTERFACE", node("DECLARATION", <eaInterfaceHeader>) [<NL>* <classBody> | <NL>* <enumClassBody>]);

<eaClassHeader>		::= [<modifiers>] "class" <NL>*
						<simpleIdentifierAsName> [<NL>* <typeParameters>]
						[<primaryConstructor>]
						[<NL>* ":" <NL>* <delegationSpecifiers>]
						[<NL>* <typeConstraints>];

<eaInterfaceHeader>	::= [<modifiers>] ["fun" <NL>*] "interface" <NL>*
						<simpleIdentifierAsName> [<NL>* <typeParameters>]
						[<primaryConstructor>]
						[<NL>* ":" <NL>* <delegationSpecifiers>]
						[<NL>* <typeConstraints>];


<primaryConstructor>::= [[<modifiers>] "constructor" <NL>*] <classParameters>;

// OPEN_POSITION and INSERT_POSITION are Enterprise Architect constructs to help insert new class members.
<classBody>			::= node("BODY", "{" attributeEx("OPEN_POSITION") <NL>* <classMemberDeclarations> attributeEx("INSERT_POSITION") <NL>* "}" );

<classParameters>	::= "(" <NL>* [<classParameter> (<NL>* "," <NL>* <classParameter>)* [<NL>* ","]] <NL>* ")";

<classParameter>	::= node("PARAMETER", [<modifiers>]
						["val" | "var"] <NL>* <simpleIdentifierAsName>
						":" <NL>* <typeAsType>
						[<NL>* "=" <NL>* attribute("DEFAULT", <expression>)]);

<delegationSpecifiers>	::= <annotatedDelegationSpecifier> (<NL>* "," <NL>* <annotatedDelegationSpecifier>)*;

<delegationSpecifier>	::= <constructorInvocation> |
							<explicitDelegation> |
							<userType> |
							<functionType>;

<constructorInvocation> ::= <userType> <valueArguments>;

<annotatedDelegationSpecifier>	::= <annotation>* <NL>* <delegationSpecifier>;

<explicitDelegation>	::= (<userType> | <functionType>) <NL>* "by" <NL>* <expression>;


////////////////////////////////////////////////////////
// Syntax Grammar : Generic Constraints
////////////////////////////////////////////////////////
<typeParameters>	::= node("TEMPLATE", "<" <NL>* <typeParameter> (<NL>* "," <NL>* <typeParameter>)* [<NL>* ","] <NL>* ">");

<typeParameter>		::= node("PARAMETER", [<typeParameterModifiers>] <NL>* <simpleIdentifierAsName> [<NL>* ":" <NL>* <typeAsType>]);


////////////////////////////////////////////////////////
// Syntax Grammar : Generic Classes
////////////////////////////////////////////////////////
<typeConstraints>		::= "where" <NL>* <typeConstraint> (<NL>* "," <NL>* <typeConstraint>)*;

<typeConstraint>		::= <annotation>* <simpleIdentifier> <NL>* ":" <NL>* <type>;



////////////////////////////////////////////////////////
// Syntax Grammar : Class members
////////////////////////////////////////////////////////

<classMemberDeclarations>	::= (<classMemberDeclaration> [<semis>])*;

<classMemberDeclaration>	::= <declaration> |
								<companionObject> |
								<anonymousInitializer> |
								<secondaryConstructor>;

<anonymousInitializer>		::= "init" <NL>* <block>;

<companionObject>			::= node("CLASS", node("DECLARATION", [<modifiers>] attribute("STEREOTYPE", "companion") <NL>* "object" [<NL>* <simpleIdentifierAsName>]
								[<NL>* ":" <NL>* <delegationSpecifiers>])
								[<NL>* <classBody>]);

<functionValueParameters>	::= "(" <NL>* [<functionValueParameter> (<NL>* "," <NL>* <functionValueParameter>)* [<NL>* ","]] <NL>* ")";

<functionValueParameter>	::= [<parameterModifiers>] <parameter> [<NL>* "=" <NL>* <expression>];

<functionDeclaration>		::= node("METHOD", node("DECLARATION", [<modifiers>] "fun" [<NL>* <typeParameters>]
								[<NL>* <eaReceiverType>]
								<NL>* <simpleIdentifierAsName> <NL>* <functionValueParameters>
								[<NL>* ":" <NL>* <typeAsType>] [<NL>* <typeConstraints>])
								[<NL>* <functionBody>]);

<functionBody>				::= <eaFunctionBlock> | <eaFunctionExpression>;
<eaFunctionBlock>			::= node("BODY", "{" skipBalanced("{", "}", <languageEscape>) "}");
//<eaFunctionBlock>			::= node("BODY", "{" <NL>* [attribute("CODE", <statements>)] <NL>* "}");
<eaFunctionExpression>		::= node("BODY", "=" <NL>* attribute("CODE", <expression>));

<variableDeclaration>		::= node("DECLARATOR", <annotation>* <NL>* <simpleIdentifierAsName>
								[<NL>* ":" <NL>* <typeAsType>]);

<multiVariableDeclaration>	::= "(" <NL>* [<variableDeclaration> (<NL>* "," <NL>* <variableDeclaration>)* [<NL>* ","]] <NL>* ")";

////////////////////////////////////////////////////////
// Syntax Grammar : Properties and Fields
////////////////////////////////////////////////////////

<propertyDeclaration>	::= node("FIELD", [<modifiers>] ("val" | "var") [<NL>* <typeParameters>]
							[<NL>* <receiverType> "."]
							<NL>* (<multiVariableDeclaration> | <variableDeclaration>)
							[<NL>* <typeConstraints>]
							[<NL>* "=" <NL>* attribute("DEFAULT", <expression>) | <propertyDelegate>] [<NL>* ";"]
							[<NL>* <getter> [<NL>* [<semi>] <setter>] | <NL>* <setter> [<NL>* [<semi>] <getter>]]
							);

<propertyDelegate>		::= "by" <NL>* <expression>;

<getter>				::= [<modifiers>] "get" [<NL>* "(" <NL>* ")" [<NL>* ":" <NL>* <type>] <NL>* <functionBody>];

<setter>				::= [<modifiers>] "set" [<NL>* "(" <NL>* <parameterWithOptionaltype> [<NL>* ","] <NL>* ")" [<NL>* ":" <NL>* <type>] <NL>* <functionBody>];

<parametersWithOptionalType>::= "(" <NL>* [<parameterWithOptionalType> (<NL>* "," <NL>* <parameterWithOptionalType>)* [<NL>* ","]] <NL>* ")";

<parameterWithOptionalType>	::= node("PARAMETER", [<parameterModifiers>] <simpleIdentifierAsName>
								<NL>* [":" <NL>* <typeAsType>]);
								
<parameter>					::= node("PARAMETER", [<parameterModifiers>] <simpleIdentifierAsName>
								<NL>* ":" <NL>* <typeAsType>);


////////////////////////////////////////////////////////
// Syntax Grammar : Object expressions and Declarations
////////////////////////////////////////////////////////
<objectDeclaration>	::= node("CLASS", node("DECLARATION", [<modifiers>] "object" attributeEx("STEREOTYPE", "singleton") <NL>* <simpleIdentifierAsName>
						[<NL>* ":" <NL>* <delegationSpecifiers>])
						[<NL>* <classBody>]);

<secondaryConstructor>	::= [<modifiers>] "constructor" <NL>* <functionValueParameters>
							[<NL>* ":" <NL>* <constructorDelegationCall>] <NL>* <block>;

<constructorDelegationCall>	::= "this" <NL>* <valueArguments> |
								"super" <NL>* <valueArguments>;


////////////////////////////////////////////////////////
// Syntax Grammar : Enum Classes
////////////////////////////////////////////////////////

<enumClassBody>	::= "{" <NL>* [<enumEntries>] [<NL>* ";" <NL>* <classMemberDeclarations>] <NL>* "}";

<enumEntries>	::= <enumEntry> [<NL>* "," <NL>* <enumEntry>]* [<NL>* ","];

<enumEntry>		::= [<modifiers> <NL>*] <simpleIdentifier> [<NL>* <valueArguments>] [<NL>* <classBody>];



////////////////////////////////////////////////////////
// Syntax Grammar : Types
////////////////////////////////////////////////////////

<type>		::= [<typeModifiers>] (<nullableType>|<functionType>|<parenthesizedType>|<typeReference>);

<typeReference>	::= <userType> | "dynamic";

<nullableType>	::= (<typeReference> | <parenthesizedType>) <NL>* <quest>+;

// Skipped QUEST_WS
<quest>						::= "?";

<userType>					::= <simpleUserType> (<NL>* "." <NL>* <simpleUserType>)*;

<simpleUserType>			::= <simpleIdentifier> [<NL>* <typeArguments>];

<typeProjection>			::= [<typeProjectionModifiers>] <type> | "*";

<typeProjectionModifiers>	::= <typeProjectionModifier>+;

<typeProjectionModifier>	::= <varianceModifier> <NL>* | <annotation>;

<functionType>				::= [<receiverType> <NL>* "." <NL>*] <functionTypeParameters> <NL>* "->" <NL>* <type>;

<functionTypeParameters>	::= "(" <NL>* [<parameter>|<type>] (<NL>* "," <NL>* (<parameter>|<type>))* [<NL>* ","] <NL>* ")";

<parenthesizedType>			::= "(" <NL>* <type> <NL>* ")";

<receiverType>				::= [<typeModifiers>] (<parenthesizedType> | <nullableType> | <typeReference>);

// Because the Enterprise Architect parser is greedy we need to ensure that the usertype doesn't consume a following name
<eaReceiverType>			::=[<typeModifiers>] (<parenthesizedType> <NL>* "." | <nullableType> <NL>* "." | "simple" <NL>* "." | <eaUserTypeQualifier>);
<eaUserTypeQualifier>		::= (<simpleUserType> <NL>* ".")*;

<parenthesizedUserType>		::= "(" <NL>* (<userType>|<parenthesizedUserType>) <NL>* ")";


////////////////////////////////////////////////////////
// Syntax Grammar : Statements
////////////////////////////////////////////////////////

<statements>		::= [<statement> (<semis> <statement>)*] [<semis>];

<statement>			::= (<label> | <annotation>)*
						(<declaration> | <assignment> | <loopStatement> | <expression>);


////////////////////////////////////////////////////////
// Syntax Grammar : Returns and jumps
////////////////////////////////////////////////////////

<label>					::= (<simpleIdentifier> | "this") "@" <NL>*;

<controlStructureBody>	::= <skippedblock> | <statement>;

<block>					::= "{" <NL>* <statements> <NL>* "}";

<skippedblock>			::= node("BODY", "{" skipBalanced("{", "}", <languageEscape>) "}");

<loopStatement>			::= <forStatement> | <whileStatement> | <doWhileStatement>;

<forStatement>			::= "for"
							<NL>* "("
							<annotation>*
							(<variableDeclaration> | <multiVariableDeclaration>)
							"in"
							<expression>
							")"
							<NL>* [<controlStructureBody>];

<whileStatement>		::= "while" <NL>* "(" <expression> ")" <NL>* (<controlStructureBody> | ";");

<doWhileStatement>		::= "do" <NL>* [<controlStructureBody>] <NL>* "while" <NL>* "(" <expression> ")";

<assignment>			::= <directlyAssignableExpression> "=" <NL>* <expression> |
							<assignableExpression> <assignmentAndOperator> <NL>* <expression>;

<semi> ::= (";" | <NL>) <NL>*;

<semis> ::= (";" | <NL>)+;



////////////////////////////////////////////////////////
// Syntax Grammar : Expressions
////////////////////////////////////////////////////////

<expression>		::= <disjunction>;
<disjunction>		::= preProcess(<conjunction>,
						node("DISJUNCTION", node("EXPRESSION", <?>) (<NL>* "||" <NL>* node("EXPRESSION", <conjunction>))+) |
						<?>
					);

<conjunction>		::= preProcess(<equality>,
						node("CONJUNCTION", node("EXPRESSION", <?>) (<NL>* "&&" <NL>* node("EXPRESSION", <equality>))+) |
						<?>
					);
				
<equality>			::= preProcess(<comparison>,
						node("EQUALITY", node("EXPRESSION", <?>) (attribute("OPERATOR", <equalityOperator>) <NL>* node("EXPRESSION", <comparison>))+) |
						<?>
					);
				
<comparison>		::= preProcess(<infixOperation>,
						node("COMPARISON", node("EXPRESSION", <?>) attribute("OPERATOR", <comparisonOperator>) <NL>* node("EXPRESSION", <infixOperation>)) |
						<?>
					);
					
<infixOperation>	::= preProcess(<elvisExpression>,
						node("IN", node("EXPRESSION", <?>) attribute("OPERATOR", <inOperator>)  <NL>* node("EXPRESSION", <elvisExpression>)) |
						node("IS", node("EXPRESSION", <?>) attribute("OPERATOR", <isOperator>)  <NL>* node("TYPE", <type>)) |
						<?>
					);

<elvisExpression>	::= preProcess(<infixFunctionCall>,
						node("ELVIS", node("EXPRESSION", <?>) (<NL>* <elvis> <NL>* node("EXPRESSION", <infixFunctionCall>))+) |
						<?>
					);

<elvis>				::= "?" ":";

<infixFunctionCall>	::= preProcess(<rangeExpression>,
						node("INFIX_FUNCTION_CALL", node("EXPRESSION", <?>) (<simpleIdentifier> <NL>* node("EXPRESSION", <rangeExpression>))+) |
						<?>
					);

<rangeExpression>	::= preProcess(<additiveExpression>,
						node("RANGE", node("EXPRESSION", <?>) (".." <NL>* node("EXPRESSION", <additiveExpression>))+) |
						<?>
					);

<additiveExpression>::= preProcess(<multiplicativeExpression>,
						node("ADD", node("EXPRESSION", <?>) (attribute("OPERATOR", <additiveOperator>) <NL>* node("EXPRESSION", <multiplicativeExpression>))+) |
						<?>
					);
					
<multiplicativeExpression>::= preProcess(<asExpression>,
						node("MULTIPLY", node("EXPRESSION", <?>) (attribute("OPERATOR", <multiplicativeOperator>) <NL>* node("EXPRESSION", <asExpression>))+) |
						<?>
					);
					
<asExpression>		::= preProcess(<comparisonWithLiteralRightSide>,
						node("AS", node("EXPRESSION", <?>) <NL>* attribute("OPERATOR", <asOperator>) <NL>* node("TYPE", <type>)) |
						<?>
					);
					
<comparisonWithLiteralRightSide>	::= preProcess(<prefixUnaryExpression>,
						node("AS", node("EXPRESSION", <?>) (<NL>* "<" <NL>* attribute("LITERAL", <literalConstant>) <NL>* ">"  <NL>* node("EXPRESSION", (<parenthesizedExpression>|<expression>)))+) |
						<?>
					);

<prefixUnaryExpression>	::= node("PREFIX", <unaryPrefix>+ node("EXPRESSION", <postfixUnaryExpression>)) |
							<postfixUnaryExpression>;

<unaryPrefix>			::= <annotation> | <label> | <prefixUnaryOperator> <NL>*;

<postfixUnaryExpression>::= preProcess(<primaryExpression>,
							node("POSTFIX", node("EXPRESSION", <?>) <postfixUnarySuffix>+) |
							<?>
						);

<postfixUnarySuffix>	::= <postfixUnaryOperator> |
							<typeArguments> |
							<callSuffix> |
							<indexingSuffix> |
							<navigationSuffix>;

<directlyAssignableExpression>	::= <postFixUnaryExpression> <assignableSuffix> |
									node("IDENTIFIER", attribute("NAME", <simpleIdentifier>)) |
									<parenthesizedDirectlyAssignableExpression>;

<parenthesizedDirectlyAssignableExpression>	::= "(" <NL>* <directlyAssignableExpression> <NL>* ")";

<assignableExpression>	::= <prefixUnaryExpression> | <parenthesizedAssignableExpression>;

<parenthesizedAssignableExpression>	::= "(" <NL>* <assignableExpression> <NL>* ")";

<assignableSuffix>		::= <typeArguments> | <indexingSuffix> | <navigationSuffix>;

<indexingSuffix>		::= "[" <NL>* <expression> (<NL>* "," <NL>* <expression>)* [<NL>* ","] <NL>* "]";

<navigationSuffix>		::= <NL>* <memberAccessOperator> <NL>* (<simpleIdentifier> | <parenthesizedExpression> | "class");

<callSuffix>			::= [<typeArguments>] [<valueArguments>] <annotatedLambda> |
							[<typeArguments>] <valueArguments>;

<annotatedLambda>		::= (<annotation>)* [<label>] <NL>* <lambdaLiteral>;

<typeArguments>			::= "<" <NL>* <typeProjection> (<NL>* "," <NL>* <typeProjection>)* [<NL>* ","] <NL>* ">";

<valueArguments>		::= "(" <NL>* ")" |
						"(" <NL>* <valueArgument> (<NL>* "," <NL>* <valueArgument>)* [<NL>* ","] <NL>* ")";

<valueArgument>			::= [<annotation>] <NL>* [<simpleIdentifier> <NL>* "="< NL>*] ["*"] <NL>* <expression>;

<primaryExpression>		::= <parenthesizedExpression> | 
							<simpleIdentifier> |
							<literalConstant> |
							<stringLiteral> |
							<callableReference> |
							<functionLiteral> |
							<objectLiteral> |
							<collectionLiteral> |
							<thisExpression> |
							<superExpression> |
							<ifExpression> |
							<whenExpression> |
							<tryExpression> |
							<jumpExpression>;
							
<parenthesizedExpression>	::= "(" <NL>* <expression> <NL>* ")";

<collectionLiteral>		::= "[" <NL>* [<expression> (<NL>* "," <NL>* <expression>)* [<NL>* ","] <NL>*] "]";

///!!!!!!!!!!!!!!!!!

<literalConstant>		::= <BOOLEAN_LITERAL> |
							<NUMBER> |
							"null";

<stringLiteral>			::= "\"" <STRING_BODY> "\"" |
							"\'" <CHAR_BODY> "\'";


///!!!!!!!!!!!!!!!!!


<lambdaLiteral>			::= "{" <NL>* [[<lambdaParameters> <NL>*] "->" <NL>*] <statements> <NL>* "}";

<lambdaParameters>		::= <lambdaParameter> (<NL>* "," <NL>* <lambdaParameter>)* [<NL>* ","];

<lambdaParameter>		::= <variableDeclaration> | <multiVariableDeclaration> [<NL>* ":" <NL>* <type>];

<anonymousFunction>		::= "fun" [<NL>* <type> <NL>* "."] <NL>* <parametersWithOptionalType>
							[<NL>* ":" <NL>* <type>] [<NL>* <typeConstraints>]
							[<NL>* <functionBody>];

<functionLiteral>		::= <lambdaLiteral> | <anonymousFunction>;

<objectLiteral>			::= "object" <NL>* [":" <NL>* <delegationSpecifiers> <NL>*] <classBody>;

<thisExpression>		::= "this";

<superExpression>		::= "super" ["<" <NL>* <type> <NL>* ">"] ["@" <simpleIdentifier>];

// Again, EA greedy parser interferes here.
<ifExpression>			::= "if" <NL>* "(" <NL>* <expression> <NL>* ")" <NL>* <eaIfBody>;

// My understanding from the source grammar is that you can have an else without any kind of body
// It's easiest to check for that case first in EA
<eaIfBody>				::= <eaElse> | (<controlStructureBody> | ";") [<eaElse>];
<eaElse>				::= "else" <NL>* (<controlStructureBody> | ";");

<whenSubject>			::= "(" [(<annotation>)* <NL>* "val" <NL>* <variableDeclaration> <NL>* "="<NL>* ] <expression> ")";

<whenExpression>		::= "when" <NL>* [<whenSubject>] <NL>* "{" <NL>* (<whenEntry> <NL>*)* "}";

<whenEntry>				::= <whenCondition> (<NL>* "," <NL>* <whenCondition>)* [<NL>* ","] <NL>* "->" <NL>* <controlStructureBody> [<semi>] |
							"else" <NL>* "->" <NL>* <controlStructureBody> [<semi>];

<whenCondition>			::= <expression> | <rangeTest> | <typeTest>;

<rangeTest>				::= <inOperator> <NL>* <expression>;

<typeTest>				::= <isOperator> <NL>* <type>;

<tryExpression>			::= "try" <NL>* <block> ((<NL>* <catchBlock>)+ [<NL>* <finallyBlock>]|<NL>* <finallyBlock>);

<catchBlock>			::= "catch" <NL>* "(" <NL>* <annotation>* <simpleIdentifier> ":" <type> [<NL>* ","] ")" <NL>* <block>;

<finallyBlock>			::= "finally" <NL>* <block>;

<jumpExpression>		::= node("THROW", "throw" <NL>* <expression>) |
							node("RETURN", "return" <expression>) |
							node("CONTINUE", "continue") |
							node("BREAK", "break");

<callableReference>		::= [<receiverType>] <NL>* "::" <NL>* (<simpleIdentifier> | "class");

<assignmentAndOperator>	::= "+=" | "-=" | "*=" | "/=" | "%=";

<equalityOperator>		::= "!==" | "!=" | "===" | "==";

<comparisonOperator>	::= "<=" | ">=" | "<" | ">";

<inOperator>			::= "in" | "!in";

<isOperator>			::= "is" | "!is";

<additiveOperator>		::= "+" | "-";

<multiplicativeOperator>::= "*" | "/" | "%";

<asOperator>			::= "as" | "as?";

<prefixUnaryOperator>	::= "++" | "--" | "+" | "-" | <excl>;

<postfixUnaryOperator>	::= "++" | "--" | "!" <excl>;

<excl>					::= "!";

<memberAccessOperator>	::= "." | <safeNav> | "::";

<safeNav>				::= "?" ".";



////////////////////////////////////////////////////////
// Syntax Grammar : Modifiers
////////////////////////////////////////////////////////
<modifiers>				::= (<annotation> <NL>* | <modifier>)+;

// This is going to require substantial rework to make it behave nicely for Enterprise Architect
<parameterModifiers>	::= (<annotation> <NL>*)+ | <parameterModifier>+;

<modifier>				::= <classModifier> |
							<memberModifier> |
							<visibilityModifier> |
							<functionModifier> |
							<propertyModifier> |
							<inheritanceModifier> |
							<parameterModifier> |
							<platformModifier> <NL>*;

<typeModifiers>			::= <typeModifier>+;

<typeModifier>			::= <annotation> | "suspend" <NL>*;

<classModifier>			::= "enum" | "sealed" | "annotation" | "data" | "inner";

<memberModifier>		::= "override" | "lateinit";

<visibilityModifier>	::= "public" | "private" | "internal" | "protected";

<varianceModifier>		::= "in" | "out";

<typeParameterModifiers>	::= <typeParameterModifier>+;

<typeParameterModifier>	::= (<reificationModifier> <NL>* | <varianceModifier> <NL>* | <annotation>);

<functionModifier>		::= "tailrec" | "operator" | "infix" | "inline" | "external" | "suspend";

<propertyModifier>		::= "const";

<inheritanceModifier>	::= "abstract" | "final" | "open";

<parameterModifier>		::= "vararg" | "noinline" | "crossinline";

<reificationModifier>	::= "reified";

<platformModifier>		::= "expect" | "actual";


////////////////////////////////////////////////////////
// Syntax Grammar : Annotations
////////////////////////////////////////////////////////

<annotation>			::= <singleAnnotation> | <multiAnnotation> <NL>*;

<singleAnnotation>		::= <annotationUseSiteTarget> <unescapedAnnotation> |
							"@" <unescapedAnnotation>;

<multiAnnotation>		::= <annotationUseSiteTarget> <NL>* "[" <unescapedAnnotation>+ "]" |
							"@[" <unescapedAnnotation> "]";

<annotationUseSiteTarget>	::= ("@field" | "@property" | "@get" | "@set" | "@receiver" | "@param" | "@setparam" | "@delegate") <NL>* ":";

<unescapedAnnotation>	::= <constructorInvocation> | <userType>;

////////////////////////////////////////////////////////
// Syntax Grammar : Identifiers
////////////////////////////////////////////////////////
<simpleIdentifier>		::= <IDENTIFIER_TOKEN>
  | "abstract"
  | "annotation"
  | "by"
  | "catch"
  | "companion"
  | "constructor"
  | "crossinline"
  | "data"
  | "dynamic"
  | "enum"
  | "external"
  | "final"
  | "finally"
  | "get"
  | "import"
  | "infix"
  | "init"
  | "inline"
  | "inner"
  | "internal"
  | "lateinit"
  | "noinline"
  | "open"
  | "operator"
  | "out"
  | "override"
  | "private"
  | "protected"
  | "public"
  | "reified"
  | "sealed"
  | "tailrec"
  | "set"
  | "vararg"
  | "where"
  | "field"
  | "property"
  | "receiver"
  | "param"
  | "setparam"
  | "delegate"
  | "file"
  | "expect"
  | "actual"
  | "const"
  | "suspend"
  ;

<identifier>	::= <simpleIdentifier> ("." <simpleIdentifier>)*;


<identifierAsName>			::= node("NAME", <simpleIdentifierAsNamePart> ("." <simpleIdentifierAsNamePart>)*);
<simpleIdentifierAsName>	::= attribute("NAME", <simpleIdentifier>);
<simpleIdentifierAsNamePart>::= attribute("NAMEPART", <simpleIdentifier>);
<typeAsType>				::= attribute("TYPE", <TYPE>);