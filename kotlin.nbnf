/*
Copyright 2020 Eve McNeilly

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
This file contains a translation of the official Kotlin language grammar into the syntax required to implement
reverse engineering into Sparx Systems Enterprise Architect.

See:
https://kotlinlang.org/docs/reference/grammar.html
https://sparxsystems.com/
*/



caseSensitive();

delimiters(<DELIMITER>);
lex(<TOKENS>);

parse(<kotlinFile>, <languageEscape>);

// Lexer rules (derived from Java sample provided in Enterprise Architect install)
<DELIMITER>			::= "\n" | "\r" | "\t" |  " " |
						"~"  | "`"  | "!"  |  "@" |
						"#"  | "%"  |  "^" |
						"&"  | "*"  | "("  | ")"  |
						"-"  | "+"  | "="  | "{"  |
						"["  | "}"  | "]"  | ";"  |
						":"  | "\\" | "\'" | "\"" |
						","  | "<"  | ">"  | "/"  |
						"?"  | "|"  | ".";

<TOKENS>			::= <WHITESPACE>+ |
						<SHEBANG_LINE> |
						<COMMENT> |
						<NUMBER> |
						<STRING> |
						token(
							keywords() |
							<IDENTIFIER_TOKEN>
						);

<WHITESPACE>		::= " " | "\r" | "\n" | "\t";

<SHEBANG_LINE>		::= token( "#!" skip("\n") );

<COMMENT>			::= token(
							"//" skip("\n") |
							"//" [skipEof()] |
							"/*" skip("*/") "*/"
						);

<NUMBER>			::= token(
						<BOOLEAN_LITERAL> |
						<HEX_FLOAT_NUMBER> |
						<DEC_FLOAT_NUMBER> |
						<HEX_NUMBER> ["l" | "L"] |
						<OCT_NUMBER> ["l" | "L"] |
						<DEC_NUMBER> ["l" | "L"]
					);

// **FIX: Numbers can have underscores between digits
// ALL NUMBER TYPES!
// <DEC_NUMBER>							::= "0".."9" ("_"* "0".."9")*;

<DEC_FLOAT_NUMBER>	::= "0".."9"+ "." ["0".."9"+] [("e" | "E") ["+" | "-"] "0".."9"+] ["f" | "F" | "d" | "D"] |
						"." "0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+] ["f" | "F" | "d" | "D"] |
						"0".."9"+ ("e" | "E") ["+" | "-"] "0".."9"+ ["f" | "F" | "d" | "D"] |
						"0".."9"+ [("e" | "E") ["+" | "-"] "0".."9"+] ("f" | "F" | "d" | "D");

<HEX_FLOAT_NUMBER>	::= "0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+ "." ("0".."9" | "a".."f" | "A".."F")* [("p" | "P") ["+" | "-"] ("0".."9" | "a".."f" | "A".."F")+] ["f" | "F" | "d" | "D"] |
						"0" ("x" | "X") "." ("0".."9" | "a".."f" | "A".."F")+ [("p" | "P") ["+" | "-"] ("0".."9" | "a".."f" | "A".."F")+] ["f" | "F" | "d" | "D"] |
						"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+ ("p" | "P") ["+" | "-"] ("0".."9" | "a".."f" | "A".."F")+ ["f" | "F" | "d" | "D"] |
						"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+ [("p" | "P") ["+" | "-"] ("0".."9" | "a".."f" | "A".."F")+] ("f" | "F" | "d" | "D");

<DEC_NUMBER>		::= "0".."9"+;

<OCT_NUMBER>		::= "0" "0".."7"+;

<HEX_NUMBER>		::= "0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;

<BOOLEAN_LITERAL>	::= "true" | "false";

<STRING>			::= token("\"") token(<STRING_BODY>) token("\"") |
						token("\'") token(<CHAR_BODY>) token("\'");

<STRING_BODY>		::= skip("\"", "\\\"" | "\\\\");

<CHAR_BODY>			::= skip("\'", "\\\'" | "\\\\");

<IDENTIFIER_TOKEN>	::= ("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "_" | "$" | "0".."9")*;

<languageEscape>	::= attribute("COMMENT", <COMMENT>);

////////////////////////////////////////////////////////
// Syntax Grammar : General
////////////////////////////////////////////////////////

// For Enterprise Architect to see the remainder of this file as belonging to
// the defined package we need to have the contents inside the package node.
<kotlinFile>		::= [<shebangLine>] <fileAnnotation>* <package>;
<package>			::= node("PACKAGE", <packageHeader> <importList> <topLevelObject>*);

// Alternate top level entry.
<script>			::= [<shebangLine>] <fileAnnotation>* <scriptPackage>;
<scriptPackage>			::= node("PACKAGE", <packageHeader> <importList> (<statement> <semi>)*);

<shebangLine>		::= <SHEBANG_LINE>;

// Left out AT_PRE_WS. Not sure if it has any application in this usage.
<fileAnnotation>	::= "@" "file" ":" ("[" <unescapedAnnotation> "]" | <unescapedAnnotation>);

////////////////////////////////////////////////////////
// Syntax Grammar : Packages
////////////////////////////////////////////////////////

<packageHeader>		::= ["package" attribute("NAME", <identifier> [<semi>])];


////////////////////////////////////////////////////////
// Syntax Grammar : Imports
////////////////////////////////////////////////////////
<importList>		::= <importHeader>*;

<importHeader>		::= node("IMPORT", "import" <identifier> ["." "*" | <importAlias>]);

<importAlias>		::= "as" <simpleIdentifier>;

<topLevelObject>	::= <declaration> <semis>;

<typeAlias>			::= [<modifiers>] "typealias" <simpleIdentifier> [<typeParameters>] "=" <type>;

<declaration>		::= <classDeclaration> |
						<objectDeclaration> |
						<functionDeclaration> |
						<propertyDeclaration> |
						<typeAlias>;


////////////////////////////////////////////////////////
// Syntax Grammar : Classes
////////////////////////////////////////////////////////

// Will require node("CLASS",...) and node("INTERFACE",...) to import
<classDeclaration>	::= [<modifiers>] ("class" | ["fun"] "interface")
						<simpleIdentifier> [<typeParameters>]
						[<primaryConstructor>]
						[":" <delegationSpecifiers>]
						[<typeConstraints>]
						[<classBody> | <enumClassBody>];

<primaryConstructor>::= [[<modifiers>] "constructor"] <classParameters>;

// OPEN_POSITION and INSERT_POSITION are Enterprise Architect constructs to help insert new class members.
<classBody>			::= node("BODY", "{" attributeEx("OPEN_POSITION") <classMemberDeclarations> attributeEx("INSERT_POSITION") "}" );

<classParameters>	::= "(" [<classParameter> ("," <classParameter>)* [","]] ")";

<classParameter>	::= node("PARAMETER", [<modifiers>]
						["val" | "var"] attribute("NAME", <simpleIdentifier>)
						":" attribute("TYPE", <type>)
						["=" attribute("DEFAULT", <expression>)]);

<delegationSpecifiers>	::= <constructorInvocation> |
							<explicitDelegation> |
							<userType> |
							<functionType>;

<constructorInvocation> ::= <userType> <valueArguments>;

<annotatedDelegationSpecifier>	::= <annotation>* <delegationSpecifier>;

<explicitDelegation>	::= (<userType> | <functionType>) "by" <expression>;


////////////////////////////////////////////////////////
// Syntax Grammar : Generic Classes
////////////////////////////////////////////////////////
<typeConstraints>		::= "where" <typeConstraint> ("," <typeConstraint>)*;

<typeConstraint>		::= <annotation>* <simpleIdentifier> ":" <type>;



////////////////////////////////////////////////////////
// Syntax Grammar : Class members
////////////////////////////////////////////////////////

<classMemberDeclarations>	::= (<classMemberDeclaration> [<semis>])*;

<classMemberDeclaration>	::= <declaration> |
								<companionObject> |
								<anonymousInitializer> |
								<secondaryConstructor>;

<anonymousInitializer>		::= "init" <block>;

<companionObject>			::= [<modifiers>] "companion" "object" [<simpleIdentifier>]
								[":" <delegationSpecifiers>]
								[<classBody>];

<functionValueParameters>	::= "(" [<functionValueParameter> ("," <functionValueParameter>) [","]] ")";

<functionValueParameter>	::= [<parameterModifiers>] <parameter> "=" <expression>;

<functionDeclaration>		::= [<modifiers>] "fun" [<typeParameters>]
								[<receiverType> "."]
								<simpleIdentifier> <functionValueParameters>
								[":" <type>] [<typeConstraints>]
								[<functionBody>];

<functionBody>				::= "=" <expression>;

<variableDeclaration>		::= node("DECLARATOR", <annotation>* attribute("NAME", <simpleIdentifier>)
								[":" attribute("TYPE", <type>)]);

<multiVariableDeclaration>	::= "(" [<variableDeclaration> ("," <variableDeclaration>)* [","]] ")";

////////////////////////////////////////////////////////
// Syntax Grammar : Properties and Fields
////////////////////////////////////////////////////////

<propertyDeclaration>	::= node("FIELD", [<modifiers>] ("val" | "var") [<typeParameters>]
							[<receiverType> "."]
							(<multiVariableDeclaration> | <variableDeclaration>)
							[<typeConstraints>]
							["=" attribute("DEFAULT", <expression>) | <propertyDelegate>] [";"]
							[<getter> [[<semi>] <setter>] | <setter> [[<semi>] <getter>]]
							);

<propertyDelegate>		::= "by" <expression>;

<getter>				::= [<modifiers>] "get" ["(" ")" [":" <type>] <functionBody>];

<setter>				::= [<modifiers>] "set" ["(" <parameterWithOptionaltype> [","] ")" [":" <type>] <functionBody>];

<parametersWithOptionalType>	::= "(" [<parameterWithOptionalType> ("," <parameterWithOptionalType>)* [","]] ")";

<parameterWithOptionalType>	::= node("PARAMETER", [<parameterModifiers>] attribute("NAME", <simpleIdentifier>)
								[":" attribute("TYPE", <type>)]);
								
<parameter>	::= node("PARAMETER", [<parameterModifiers>] attribute("NAME", <simpleIdentifier>)
								":" attribute("TYPE", <type>));


////////////////////////////////////////////////////////
// Syntax Grammar : Object expressions and Declarations
////////////////////////////////////////////////////////
<objectDeclaration>	::= [<modifiers>] "object" <simpleIdentifier>
						[":" <delegationSpecifiers>]
						[<classBody>];

<secondaryConstructor>	::= [<modifiers>] "constructor" <functionValueParameters>
							[":" <constructorDelegationCall>] <block>;

<constructorDelegationCall>	::= "this" <valueArguments> |
								"super" <valueArguments>;


////////////////////////////////////////////////////////
// Syntax Grammar : Enum Classes
////////////////////////////////////////////////////////

<enumClassBody>	::= "{" [<enumEntries>] [";" <classMemberDeclarations>] "}";

<enumEntries>	::= <enumEntry> ["," <enumEntry>]* [","];

<enumEntry>		::= [<modifiers>] <simpleIdentifier> [<valueArguments>] [<classBody>];



////////////////////////////////////////////////////////
// Syntax Grammar : Types
////////////////////////////////////////////////////////

<type>		::= [<typeModifiers>] (<parenthesizedType>|<nullableType>|<typeReference>|<functionType>);

<typeReference>	::= <userType> | "dynamic";

<nullableType>	::= (<typeReference> | <parenthesizedType>) <quest>+;

// Skipped QUEST_WS
<quest>						::= "?";

<userType>					::= <simpleUserType> ("." <simpleUserType>)*;

<simpleUserType>			::= <simpleIdentifier> [<typeArguments>];

<typeProjection>			::= [<typeProjectionModifiers>] <type>;

<typeProjectionModifiers>	::= <typeProjectionModifier>+;

<typeProjectionModifier>	::= <varianceModifier> | <annotation>;

<functionType>				::= [<receiverType> "."] <functionTypeParameters> "->" <type>;

<functionTypeParameters>	::= "(" (<parameter>|<type>) ("," (<parameter>|<type>))* [","] ")";

<parenthesizedType>			::= "(" <type> ")";

<receiverType>				::= [<typeModifiers>] (<parenthesizedType> | <nullableType> | <typeReference>);

<parenthesizedUserType>		::= "(" (<userType>|<parenthesizedUserType>) ")";


////////////////////////////////////////////////////////
// Syntax Grammar : Statements
////////////////////////////////////////////////////////

<statements>		::= [<statement> (<semis> <statement>)*] [<semis>];

<statement>			::= (<label> | <annotation>)*
						(<declaration> | <assignment> | <loopStatement> | <expression>);


////////////////////////////////////////////////////////
// Syntax Grammar : Returns and jumps
////////////////////////////////////////////////////////

<label>					::= <simpleIdentifier> "@";
<controlStructureBody>	::= <block> | <statement>;

<block>					::= "{" <statements> "}";

<loopStatement>			::= <forStatement> | <whileStatement> | <doWhileStatement>;

<forStatement>			::= "for"
							"("
							<annotation>*
							(<variableDeclaration> | <multiVariableDeclaration>)
							"in"
							<expression>
							")"
							[<controlStructureBody>];

<whileStatement>		::= "while" "(" <expression> ")" (<controlStructureBody> | ";");

<doWhileStatement>		::= "do" [<controlStructureBody>] "while" "(" <expression> ")";

<assignment>			::= <directlyAssignableExpression> "=" <expression> |
							<assignableExpression> <assignmentAndOperator> <expression>;


////////////////////////////////////////////////////////
// Syntax Grammar : Modifiers
////////////////////////////////////////////////////////
<modifiers>				::= <annotation> | <modifier>+;

// This is going to require substantial rework to make it behave nicely for Enterprise Architect
<parameterModifiers>	::= <annotation> | <parameterModifier>+;

<modifier>				::= <classModifier> |
							<memberModifier> |
							<visibilityModifier> |
							<functionModifier> |
							<propertyModifier> |
							<inheritanceModifier> |
							<parameterModifier> |
							<platformModifier>;

<typeModifiers>			::= <typeModifier>+;

<typeModifier>			::= <annotation> | "suspend";

<classModifier>			::= "enum" | "sealed" | "annotation" | "data" | "inner";

<memberModifier>		::= "override" | "lateinit";

<visibilityModifier>	::= "public" | "private" | "internal" | "protected";

<varianceModifier>		::= "in" | "out";

<typeParameterModifiers>	::= <typeParameterModifier>+;

<typeParameterModifier>	::= (<reificationModifier>|<varianceModifier>|<annotation>);

<functionModifier>		::= "tailrec" | "operator" | "infix" | "inline" | "external" | "suspend";

<propertyModifier>		::= "const";

<inheritanceModifier>	::= "abstract" | "final" | "open";

<parameterModifier>		::= "vararg" | "noinline" | "crossinline";

<reificationModifier>	::= "reified";

<platformModifier>		::= "expect" | "actual";


////////////////////////////////////////////////////////
// Syntax Grammar : Annotations
////////////////////////////////////////////////////////

<annotation>			::= <singleAnnotation> | <multiAnnotation>;

<singleAnnotation>		::= <annotationUseSiteTarget> <unescapedAnnotation> |
							"@" <unescapedAnnotation>;

<multiAnnotation>		::= <annotationUseSiteTarget> "[" <unescapedAnnotation>+ "]" |
							"@" "[" <unescapedAnnotation> "]";

<annotationUseSiteTarget>	::= "@" ("field" | "property" | "get" | "set" | "receiver" | "param" | "setparam" | "delegate") ":";

<unescapedAnnotation>	::= <userType>;

////////////////////////////////////////////////////////
// Syntax Grammar : Identifiers
////////////////////////////////////////////////////////
<simpleIdentifier>		::= <IDENTIFIER_TOKEN>
  | "abstract"
  | "annotation"
  | "by"
  | "catch"
  | "companion"
  | "constructor"
  | "crossinline"
  | "data"
  | "dynamic"
  | "enum"
  | "external"
  | "final"
  | "finally"
  | "get"
  | "import"
  | "infix"
  | "init"
  | "inline"
  | "inner"
  | "internal"
  | "lateinit"
  | "noinline"
  | "open"
  | "operator"
  | "out"
  | "override"
  | "private"
  | "protected"
  | "public"
  | "reified"
  | "sealed"
  | "tailrec"
  | "set"
  | "vararg"
  | "where"
  | "field"
  | "property"
  | "receiver"
  | "param"
  | "setparam"
  | "delegate"
  | "file"
  | "expect"
  | "actual"
  | "const"
  | "suspend"
  ;

<identifier>	::= <simpleIdentifier> ("." <simpleIdentifier>)*;



////////////////////////////////////////////////////////
// Syntax Grammar : Identifiers
////////////////////////////////////////////////////////

<expression>		::= <disjunction>;
<disjunction>		::= preProcess(<conjunction>,
						node("DISJUNCTION", node("EXPRESSION", <?>) ("||" node("EXPRESSION", <conjunction>))+) |
						<?>
					);

<conjunction>		::= preProcess(<equality>,
						node("CONJUNCTION", node("EXPRESSION", <?>) ("&&" node("EXPRESSION", <equality>))+) |
						<?>
					);
				
<equality>			::= preProcess(<comparison>,
						node("EQUALITY", node("EXPRESSION", <?>) (attribute("OPERATOR", <equalityOperator>) node("EXPRESSION", <comparison>))+) |
						<?>
					);
				
<comparison>		::= preProcess(<infixOperation>,
						node("COMPARISON", node("EXPRESSION", <?>) attribute("OPERATOR", <comparisonOperator>) node("EXPRESSION", <infixOperation>)) |
						<?>
					);
					
<infixOperation>	::= preProcess(<elvisExpression>,
						node("IN", node("EXPRESSION", <?>) attribute("OPERATOR", <inOperator>)  node("EXPRESSION", <elvisExpression>)) |
						node("IS", node("EXPRESSION", <?>) attribute("OPERATOR", <isOperator>)  node("TYPE", <type>)) |
						<?>
					);

<elvisExpression>	::= preProcess(<infixFunctionCall>,
						node("ELVIS", node("EXPRESSION", <?>) (<elvis> node("EXPRESSION", <infixFunctionCall>))+) |
						<?>
					);

<elvis>				::= "?" ":";

<infixFunctionCall>	::= preProcess(<rangeExpression>,
						node("INFIX_FUNCTION_CALL", node("EXPRESSION", <?>) (<simpleIdentifier> node("EXPRESSION", <rangeExpression>))+) |
						<?>
					);

<rangeExpression>	::= preProcess(<additiveExpression>,
						node("RANGE", node("EXPRESSION", <?>) (".." node("EXPRESSION", <additiveExpression>))+) |
						<?>
					);

<additiveExpression>::= preProcess(<multiplicativeExpression>,
						node("ADD", node("EXPRESSION", <?>) (attribute("OPERATOR", <additiveOperator>)  node("EXPRESSION", <multiplicativeExpression>))+) |
						<?>
					);
					
<multiplicativeExpression>::= preProcess(<asExpression>,
						node("MULTIPLY", node("EXPRESSION", <?>) (attribute("OPERATOR", <multiplicativeOperator>)  node("EXPRESSION", <asExpression>))+) |
						<?>
					);
					
<asExpression>		::= preProcess(<comparisonWithLiteralRightSide>,
						node("AS", node("EXPRESSION", <?>) attribute("OPERATOR", <asOperator>)  node("TYPE", <type>)) |
						<?>
					);
					
<comparisonWithLiteralRightSide>	::= preProcess(<prefixUnaryExpression>,
						node("AS", node("EXPRESSION", <?>) ("<" attribute("LITERAL", <literalConstant>) ">"  node("EXPRESSION", (<parenthesizedExpression>|<expression>)))+) |
						<?>
					);

<prefixUnaryExpression>	::= node("PREFIX", <unaryPrefix>+ node("EXPRESSION", <postfixUnaryExpression>)) |
							<postfixUnaryExpression>;

<unaryPrefix>			::= <annotation> | <label> | <prefixUnaryOperator>;

<postfixUnaryExpression>::= preProcess(<primaryExpression>,
							node("POSTFIX", node("EXPRESSION", <?>) <postfixUnarySuffix>+) |
							<?>
						);

<postfixUnarySuffix>	::= <postfixUnaryOperator> |
							<typeArguments> |
							<callSuffix> |
							<indexingSuffix> |
							<navigationSuffix>;

<directlyAssignableExpression>	::= <postFixUnaryExpression> <assignableSuffix> |
									node("IDENTIFIER", attribute("NAME", <simpleIdentifier>)) |
									<parenthesizedDirectlyAssignableExpression>;

<parenthesizedDirectlyAssignableExpression>	::= "(" <assignableExpression> ")";

<assignableSuffix>		::= <typeArguments> | <indexingSuffix> | <navigationSuffix>;

<indexingSuffix>		::= "[" <expression> ("," <expression>)* [","] "]";

<navigationSuffix>		::= <memberAccessOperator> (<simpleIdentifier> | <parenthesizedExpression> | "class");

<callSuffix>			::= [<typeArguments>] [<valueArguments>] <annotatedLambda> |
							[<typeArguments>] <valueArguments>;

<annotatedLambda>		::= (<annotation>)* [<label>] <lambdaLiteral>;

<typeArguments>			::= "<" <typeProjection> ("," <typeProjection>)* [","] ">";

<valueArguments>		::= "(" ")" |
						"(" <valueArgument> ("," <valueArgument>)* [","] ")";

<valueArgument>			::= [<annotation>] [<simpleIdentifier> "="] ["*"] <expression>;

<primaryExpression>		::= <parenthesizedExpression> | 
							<simpleIdentifier> |
							<literalConstant> |
							<stringLiteral> |
							<callableReference> |
							<functionLiteral> |
							<objectLiteral> |
							<collectionLiteral> |
							<thisExpression> |
							<superExpression> |
							<ifExpression> |
							<whenExpression> |
							<tryExpression> |
							<jumpExpression>;
							
<parenthesizedExpression>	::= "(" <expression> ")";

<collectionLiteral>		::= "[" <expression> ("," <expression>)* [","] "]";

<literalConstant>		::= <BOOLEAN_LITERAL> |
							<NUMBER> |
							"null";

<stringLiteral>			::= <STRING>;

<lambdaLiteral>			::= "{" [[<lambdaParameters>] "->"] <statements> "}";

<lambdaParameters>		::= <lambdaParameter> ("," <lambdaParameter>)* [","];

<lambdaParameter>		::= <variableDeclaration> | <multiVariableDeclaration> [":" <type>];

<anonymousFunction>		::= "fun" [<type> "."] <parametersWithOptionalType>
							[":" <type>] [<typeConstraints>]
							[<functionBody>];

<functionLiteral>		::= <lambdaLiteral> | <anonymousFunction>;

<objectLiteral>			::= "object" [":" <delegationSpecifiers>] <classBody>;

<thisExpression>		::= "this";

<superExpression>		::= "super";

<ifExpression>			::= "if" "(" <expression> ")" (<controlStructureBody> | ";") |
							"if" "(" <expression> ")" [<controlStructureBody>] [";"] "else" (<controlStructureBody> | ";");

<whenSubject>			::= "(" [(<annotation>)* "val" <variableDeclaration> "="] <expression> ")";

<whenExpression>		::= "when" [<whenSubject>] "{" <whenEntry>* "}";

<whenEntry>				::= <whenCondition> ("," <whenCondition>)* [","] "->" <controlStructureBody> [<semi>] |
							"else" "->" <controlStructureBody> [<semi>];

<whenCondition>			::= <expression> | <rangeTest> | <typeTest>;

<rangeTest>				::= <inOperator> <expression>;

<typeTest>				::= <isOperator> <type>;

<tryExpression>			::= "try" <block> (<catchBlock>+ [<finallyBlock>]|<finallyBlock>);

<catchBlock>			::= "catch" "(" <annotation>* <simpleIdentifier> ":" <type> [","] <block>;

<finallyBlock>			::= "finally" <block>;

<jumpExpression>		::= "throw" <expression> |
							"return" <expression> |
							"continue" |
							"break";

<callableReference>		::= [<receiverType>] "::" (<simpleIdentifier> | "class");

<assignmentAndOperator>	::= "+=" | "-=" | "*=" | "/=" | "%=";

<equalityOperator>		::= "!==" | "!=" | "===" | "==";

<comparisonOperator>	::= "<=" | ">=" | "<" | ">";

<inOperator>			::= "in" | "!in";

<isOperator>			::= "is" | "!is";

<additiveOperator>		::= "+" | "-";

<multiplicativeOperator>::= "*" | "/" | "%";

<asOperator>			::= "as" | "as?";

<prefixUnaryOperator>	::= "++" | "--" | "+" | "-" | <excl>;

<postfixUnaryOperator>	::= "++" | "--" | "!" <excl>;

<excl>					::= "!";

<memberAccessOperator>	::= "." | <safeNav> | "::";

<safeNav>				::= "?" ".";


////////////////////////////////////////////////////////
// Placeholders for rules not yet implemented
////////////////////////////////////////////////////////

<assignableExpression> ::= fail();
<delegationSpecifier> ::= fail();
<semi> ::= fail();
<semis> ::= fail();
<typeParameters> ::= fail();


